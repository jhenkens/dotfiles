#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
export DOTFILES=$HOME/.dotfiles

set -e

UNAME=Other
if test "$(uname)" = "Darwin"
then
  UNAME=Darwin
elif test "$(expr substr $(uname -s) 1 5)" = "Linux"
then
  UNAME=Linux
fi
  
FIND="find -H $DOTFILES -regextype posix-extended"
if [ "$UNAME" == "Darwin" ]
then
  FIND="find -H -E $DOTFILES"
fi

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/.gitconfig.local.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$UNAME" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/.gitconfig.local.symlink.example > git/.gitconfig.local.symlink

    success 'gitconfig'
  fi
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action </dev/tty

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    mkdir -p "$(dirname $dst)"
    ln -s "$src" "$dst"
    success "linked $src to $dst"
  fi
}

find_failures () {
  info 'checking for fuckups'
  $FIND \( -name '*.symlink' -o -name '*.symlink@'"$UNAME" \) -a \( -path '*/*.symlink/*' -o -path '*/*.symlink@'"$UNAME"'/*' \) | \
  while IFS= read -r src
  do
    fail 'Cannot have a symlink in a symlink: '"$src"
  done
}

find_dotfiles () {
  $FIND \( -name '*.symlink' -o -name '*.symlink@'"$UNAME" \) -not -path '*.git/*' \
  | perl -ne 'print if not /@(?!'"$UNAME"')/'
}
find_installers () {
  $FIND \( -name 'install.sh' -o -name 'install.sh@'"$UNAME" \) -not -path '*.git/*' \
  | perl -ne 'print if not /@(?!'"$UNAME"')/'
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  find_dotfiles | \
  while IFS= read -r src
  do
    dst=$(realpath --relative-to $DOTFILES $src)
    dst=${dst#*/};
    dst="$HOME/${dst%.*}"
    link_file "$src" "$dst"
  done
}

install_dependencies () {
  
  # Install homebrew
  $DOTFILES/homebrew/install.sh 2>&1
  
  # Upgrade homebrew
  echo "› brew update"
  brew update
}

install_modules () {
  # Run Homebrew through the Brewfile
  echo "› brew bundle"
  brew bundle --file=Brewfile
  if [ -e "Brewfile@$UNAME" ]
  then
    brew bundle --file="Brewfile@$UNAME"
  fi
  
  # find the platform installers and run them iteratively
  find_installers | \
  while IFS= read -r installer
  do
     info "$installer"
     sh -c "${installer}" 
  done
}

setup_gitconfig
install_dotfiles
install_dependencies
install_modules

echo ''
echo '  All installed!'
